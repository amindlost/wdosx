; ############################################################################
; ## WDOSX DOS Extender           Copyright (c) 1996, 1999, Michael Tippach ##
; ##                                                                        ##
; ## Released under the terms of the WDOSX license agreement.               ##
; ############################################################################
;
; $Header: E:/RCS/WDOSX/0.95/SRC/legacy/LFUNS.ASI 1.1 1999/02/07 18:12:44 MikeT Exp $
;
; ----------------------------------------------------------------------------
;
; $Log: LFUNS.ASI $
; Revision 1.1  1999/02/07 18:12:44  MikeT
; Initial check in.
;
;
; ----------------------------------------------------------------------------
;
; Old floating segment PE code which I'm too lazy to maintain any longer or to
; even comment on. It should stay as is and eventually die.
;


; ############################################################################
; ##                  A bunch of those "l.." functions                      ##
; ############################################################################

lstrlen:
lstrlenA:
	mov	edx,[esp+4]
	sub	eax,eax
lstrlen00:
	cmp	byte ptr [edx+eax],0
	jz	short lstrlen01
	inc	eax
	jmp	short lstrlen00
lstrlen01:
	retn	4

; ############################################################################

lstrcpy:
lstrcpyA:
	mov	edx,[esp+4]
	mov	ecx,[esp+8]
lstrcpy00:
	mov	al,[ecx]
	inc	ecx
	mov	[edx],al
	inc	edx
	test	al,al
	jnz	short lstrcpy00
	mov	eax,[esp+4]
	retn	8

; ############################################################################

lstrcpyn:
lstrcpynA:
	push	ebx
	mov	edx,[esp+8]
	mov	ecx,[esp+12]
	mov	ebx,[esp+16]
	sub	eax,eax
	dec	ebx
	js	short lstrcpyn02
	jz	short lstrcpyn01
lstrcpyn00:
	mov	al,[ecx]
	inc	ecx
	mov	[edx],al
	inc	edx
	dec	ebx
	jnz	short lstrcpyn00
lstrcpyn01:
	mov	[edx],bl
	mov	eax,[esp+8]
lstrcpyn02:
	pop	ebx
	retn	8

; ############################################################################

lstrcat:
lstrcatA:
	push	dword ptr [esp+4]
	call	lstrlen
	add	eax,[esp+4]
	push	dword ptr [esp+8]
	push	eax
	call	lstrcpy
	mov	eax,[esp+4]
	retn	8

; ############################################################################

; Not entirely correct ( should be word sort thingy )

lstrcmp:
lstrcmpA:
	mov	edx,[esp+4]
	mov	ecx,[esp+8]
	sub	eax,eax
lstrcmp00:
	mov	al,[edx]
	sub	al,[ecx]
	sbb	ah,ah
	cmp	byte ptr [edx],0
	jz	short lstrcmp01
	cmp	byte ptr [ecx],0
	jz	short lstrcmp01
	inc	edx
	inc	ecx
	test	eax,eax
	jnz	short lstrcmp00
lstrcmp01:
	movsx	eax,ax
	retn	8

; ############################################################################

lstrcmpi:
lstrcmpiA:
	mov	edx,[esp+4]
	mov	ecx,[esp+8]
	sub	eax,eax
lstrcmpi00:
	mov	al,[edx]
	cmp	al,'A'
	jc	short lstrcmpi001
	cmp	al,'Z'
	ja	short lstrcmpi001
	or	al,20h
lstrcmpi001:
	mov	ah,[ecx]
	cmp	ah,'A'
	jc	short lstrcmpi002
	cmp	ah,'Z'
	ja	short lstrcmpi002
	or	ah,20h
lstrcmpi002:
	sub	al,ah
	sbb	ah,ah
	cmp	byte ptr [edx],0
	jz	short lstrcmp01
	cmp	byte ptr [ecx],0
	jz	short lstrcmp01
	inc	edx
	inc	ecx
	test	eax,eax
	jnz	short lstrcmp00
lstrcmpi01:
	movsx	eax,ax
	retn	8

; ############################################################################
;
; ... yet some legacy file functions
;
; ############################################################################

_hread:
_lread:
	push	ebx
	mov	ebx,[esp+8]
	mov	edx,[esp+12]
	mov	ecx,[esp+16]
	mov	eax,3f00h
	int	21h
	sbb	ecx,ecx
	mov	lasterror,ecx
	and	lasterror,eax
	or	eax,ecx
	pop	ebx
	retn	12

; ############################################################################

_hwrite:
_lwrite:
	push	ebx
	mov	ebx,[esp+8]
	mov	edx,[esp+12]
	mov	ecx,[esp+16]
	mov	eax,4000h
	int	21h
	sbb	ecx,ecx
	mov	lasterror,ecx
	and	lasterror,eax
	or	eax,ecx
	pop	ebx
	retn	12

; ############################################################################

_lcreat:
	mov	edx,[esp+4]
	mov	ecx,[esp+8]
	mov	ah,3ch
	int	21h
	sbb	ecx,ecx
	mov	lasterror,ecx
	and	lasterror,eax
	or	eax,ecx
	retn	8

; ############################################################################

_lopen:
	mov	edx,[esp+4]
	mov	eax,[esp+8]
	mov	ah,3dh
	int	21h
	sbb	ecx,ecx
	mov	lasterror,ecx
	and	lasterror,eax
	or	eax,ecx
	retn	8

; ############################################################################

_lclose:
	push	ebx
	mov	ebx,[esp+8]
	mov	eax,3e00h
	int	21h
	sbb	ecx,ecx
	and	eax,ecx
	mov	lasterror,eax
	or	eax,ecx
	pop	ebx
	retn	4

; ############################################################################

_llseek:
	push	dword ptr [esp+12]
	push	0
	push	dword ptr [esp+16]
	push	dword ptr [esp+16]
	call	SetFilePointer
	retn	12

; ############################################################################

